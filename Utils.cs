using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Text;


namespace NormalChart
{
    public static class Utils
    {
        public static string[] colors = new string[]
              {
            "#00FFFF",  // Blue ярко синий
			"#FF0000",  // Red  
			"#85A900",  //
			"#006400",  // DarkGreen
			"#FE8900",  //
			"#95003A",  // светло-фиолетовый
			"#FF0056",
            "#007DB5",  // светло-голубой
			"#FF00F6",  //
			"#FF937E",  //
			"#6A826C",  //
			"#FF029D",  //
			"#010067" ,  //
			"#7A4782",
            "#7E2DD2",
            "#01FFFE",  // Cyan #00FFFF
			"#00FF00",
            "#A42400",
            "#00AE7E",
            "#683D3B",
            "#BDC6FF",
            "#263400",
            "#BDD393",
            "#00B917",
            "#9E008E",
            "#001544",
            "#C28C9F",
            "#FF74A3",
            "#01D0FF",
            "#004754",
            "#E56FFE",
            "#788231",
            "#0E4CA1",
            "#91D0CB",
            "#BE9970",
            "#968AE8",
            "#BB8800",
            "#43002C",
            "#DEFF74",
            "#00FFC6",
            "#FFE502",
            "#620E00",
            "#008F9C",
            "#98FF52",
            "#7544B1",
            "#B500FF",
            "#00FF78",
            "#FF6E41",
            "#005F39",
            "#6B6882",
            "#5FAD4E",
            "#A75740",
            "#A5FFD2",
            "#FFB167",
            "#009BFF",
            "#E85EBE"
          };

        public static void DataTableToCSV(DataTable dt, string path)
        {
            TextWriter writer = new StreamWriter(path);
            writer.WriteLine("sep=,");

            IEnumerable<string> columnNames = dt.Columns.Cast<DataColumn>().
                              Select(column => column.ColumnName);
            writer.WriteLine(string.Join(",", columnNames));

            foreach (DataRow row in dt.Rows)
            {
                IEnumerable<string> fields = row.ItemArray.Select(field =>
                  string.Concat("\"", field.ToString().Replace("\"", "\"\""), "\""));
                writer.WriteLine(string.Join(",", fields));
            }
            writer.Close();
        }

        public static void ODBCSourceAdd(string server)
        {
            RegistryKey key = Registry.CurrentUser.CreateSubKey(@"Software\ODBC\ODBC.INI\winccf");
               
            key.SetValue("Driver", "C:\\Windows\\system32\\SQLSRV32.dll");
            key.SetValue("Server", server);
            key.SetValue("Database", "Stats");
            key.SetValue("Trusted_Connection", "Yes");
            key.Close();

            key = Registry.CurrentUser.CreateSubKey(@"Software\ODBC\ODBC.INI\ODBC Data Sources");
            key.SetValue("winccf", "SQL Server");
            key.Close();
        }

        public static string ScriptText(DataTable dt)
        {

            List<Curve> convertedList = (from rw in dt.AsEnumerable()
                                 select new Curve()
                                 {
                                     LogId = Convert.ToInt32(rw["LogId"]),
                                     Descr = Convert.ToString(rw["Descr"])
                                 }).ToList();


            StringBuilder builder = new StringBuilder();

            builder.AppendLine("' **** Script generated by Normal Chart " +DateTime.Now.ToString()+ " ****").AppendLine();
            builder.AppendLine("If SmartTags(\"logTriggerTag\") Then").AppendLine();
            builder.AppendLine("Dim conn, rst, SQL, DT, thisday, thistime").AppendLine();
            builder.AppendLine("Set conn = CreateObject(\"ADODB.Connection\")");
            builder.AppendLine("Set rst = CreateObject(\"ADODB.Recordset\")");
            builder.AppendLine("conn.Open \"Provider=MSDASQL;DSN=winccf\"");
            builder.AppendLine("thisday = Date");
            builder.AppendLine("thistime = Time").AppendLine();
            builder.AppendLine("DT = Year(thisday) & \"-\" & Month(thisday) & \"-\" & Day(thisday) & \" \" & Hour(thistime) & \":\" & Minute(thistime) & \":\" & Second(thistime)").AppendLine();
            builder.AppendLine("SQL = \"INSERT INTO LogData([DateTime],LogId,Val) VALUES\" & _");
            foreach (Curve c in convertedList)
            {
                builder.AppendLine("\"('\"&DT&\"', " + c.LogId.ToString() + ", '\"&SmartTags(\"" + c.Descr + "\")&\"'), \" & _");
            }
            builder.Length = builder.Length - 9;
            builder.Append("\"").AppendLine(); 
            builder.AppendLine("Set rst = conn.Execute(SQL)").AppendLine();
            builder.AppendLine("SmartTags(\"logTriggerTag\") = False");
            builder.AppendLine("End If");

            return builder.ToString();
        }

        public static DataTable ReadExcelFile(string fname)
        {
            // XLSX - Excel 2007, 2010, 2012, 2013
            string cns = "Provider=Microsoft.ACE.OLEDB.12.0;;Extended Properties=Excel 12.0 XML;Data Source=" + fname + ";";
            
            // XLS - Excel 2003 and Older
            //string cns = "Provider=Microsoft.Jet.OLEDB.4.0;Excel 8.0;Data Source=+ fname + "; ";

            using (OleDbConnection conn = new OleDbConnection(cns))
            {
                conn.Open();
                OleDbCommand cmd = new OleDbCommand();
                cmd.Connection = conn;

                // Get all Sheets in Excel File
                DataTable dtSheet = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);

                // Get all rows from the Sheet
                cmd.CommandText = "SELECT [Name],[DataType],[Path] FROM [" + dtSheet.Rows[0]["TABLE_NAME"].ToString() + "]";

                    DataTable dt = new DataTable();
                    OleDbDataAdapter da = new OleDbDataAdapter(cmd);
                    da.Fill(dt);
                    cmd = null;
                    conn.Close();

                    DataColumn newColumn = new DataColumn("Log It", typeof(Boolean))
                    {
                        DefaultValue = false
                    };
                    dt.Columns.Add(newColumn);
                    newColumn.SetOrdinal(0);

                    return dt;
            }
        }

        /// <summary>
        /// Get a substring of the first N characters.
        /// </summary>
        public static string Truncate(string source, int length)
        {
            if (source.Length > length)
            {
                source = source.Substring(0, length);
            }
            return source;
        }

        /// <summary>
        /// Limit integer value to specified range
        /// </summary>
        public static int Limit(int value, int min, int max)
        {
            return (value < min) ? min : (value > max) ? max : value;
        }

    }
}
